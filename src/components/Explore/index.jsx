import React, { useState } from "react";
import { ExploreCards } from "../Data";
import ErrorBoundary from "../ErrorBoundary";
import "./style.scss";

export default function Explore() {
  const [hover, setHover] = useState(false);
  const [popImg, setPopImg] = useState("");
  const [popPlace, setPopPlace] = useState("");
  const [popLoc, setPopLoc] = useState("");
  const [popId, setPopId] = useState("");

  const isHover = (image, place, location, id) => {
    setHover(!hover);
    setPopImg(image);
    setPopPlace(place);
    setPopLoc(location);
    setPopId(id);
  };

  return (
    <section className="exploreSection">
      <div className="exploreContent">
        <div className="exploreHead">
          <h2 className="exploreTitle">Explore Exciting Destinations</h2>
          <p className="exploreSubtitle">
            Explore amazing places in your neighbourhood Lorem ipsum dolor sit
            amet, consectetur adipiscing elit. Vel nisl faucibus enim, mauris{" "}
          </p>
          <svg
            width="70"
            height="70"
            viewBox="0 0 102 102"
            fill="none"
            className="dragBtn"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle cx="50.88" cy="50.88" r="49.7394" fill="#FF9100" />
            <path
              opacity="0.9"
              d="M43.1509 9.56143C47.128 4.64155 54.6289 4.64155 58.6059 9.56143C61.0769 12.6182 65.1176 13.9311 68.9134 12.9105C75.0227 11.2679 81.0911 15.6768 81.4167 21.9947C81.6191 25.9202 84.1164 29.3574 87.7871 30.7628C93.6952 33.0249 96.0131 40.1587 92.563 45.4614C90.4194 48.7561 90.4194 53.0047 92.563 56.2993C96.0131 61.6021 93.6952 68.7359 87.7871 70.9979C84.1164 72.4034 81.6191 75.8406 81.4167 79.766C81.0911 86.0839 75.0227 90.4928 68.9134 88.8502C65.1176 87.8296 61.0769 89.1425 58.6059 92.1993C54.6289 97.1192 47.128 97.1192 43.1509 92.1993C40.6799 89.1425 36.6392 87.8296 32.8434 88.8502C26.7341 90.4928 20.6657 86.0839 20.3401 79.766C20.1377 75.8406 17.6405 72.4034 13.9697 70.9979C8.06164 68.7359 5.74373 61.6021 9.19384 56.2994C11.3375 53.0047 11.3375 48.7561 9.19384 45.4614C5.74373 40.1587 8.06164 33.0249 13.9697 30.7628C17.6405 29.3574 20.1377 25.9202 20.3401 21.9947C20.6657 15.6768 26.7341 11.2679 32.8434 12.9105C36.6392 13.9311 40.6799 12.6182 43.1509 9.56143Z"
              fill="#000825"
            />
            <path
              d="M24 54.0005C24.1839 54.0006 24.3613 54.0681 24.4986 54.1903C24.6358 54.3126 24.7235 54.4809 24.7448 54.6635L24.75 54.7505V55.9385L24.9698 55.721C25.0989 55.5918 25.2706 55.5141 25.4529 55.5025C25.6352 55.4909 25.8154 55.5462 25.9598 55.658L26.0303 55.7203C26.1594 55.8494 26.237 56.0212 26.2485 56.2035C26.2599 56.3858 26.2045 56.566 26.0926 56.7103L26.0303 56.7815L24.5303 58.2815L24.4973 58.3123L24.4463 58.3535L24.363 58.4075L24.2783 58.4473L24.1995 58.4743L24.111 58.4923L24.0443 58.4998H23.955L23.9115 58.496L23.8245 58.481L23.7435 58.4563L23.6828 58.4308L23.6093 58.3918L23.5373 58.3415C23.5136 58.3229 23.4911 58.3029 23.4698 58.2815L21.9698 56.7815C21.8338 56.6469 21.7545 56.4653 21.748 56.2741C21.7415 56.0829 21.8084 55.8964 21.9349 55.7528C22.0614 55.6093 22.238 55.5195 22.4285 55.5019C22.619 55.4842 22.8091 55.5401 22.9598 55.658L23.0303 55.7203L23.25 55.94V54.7505C23.2499 54.5667 23.3172 54.3892 23.4393 54.2518C23.5614 54.1143 23.7297 54.0265 23.9123 54.005L24 54.0005ZM28.7198 48.9702C28.849 48.8411 29.0208 48.7635 29.2031 48.7521C29.3853 48.7406 29.5655 48.796 29.7098 48.908L29.7803 48.9702L31.2803 50.4702L31.3111 50.5032L31.3523 50.5542L31.4063 50.6375L31.4468 50.7222L31.4731 50.8017L31.4918 50.8895L31.4993 50.957V51.0455L31.4948 51.089L31.4798 51.176L31.4551 51.257L31.4296 51.3185L31.3906 51.3912L31.3351 51.47L31.2803 51.5315L29.7803 53.0315C29.6457 53.1674 29.4641 53.2468 29.2729 53.2533C29.0817 53.2598 28.8952 53.1929 28.7516 53.0664C28.6081 52.9399 28.5183 52.7633 28.5007 52.5728C28.483 52.3823 28.5389 52.1922 28.6568 52.0415L28.7198 51.9703L28.9373 51.7513H27.7501C27.5661 51.7514 27.3885 51.6839 27.2511 51.5617C27.1136 51.4394 27.0259 51.2709 27.0046 51.0882L27.0001 51.0005C27.0001 50.8168 27.0675 50.6395 27.1896 50.5022C27.3117 50.3649 27.4799 50.2772 27.6623 50.2557L27.7501 50.2512H28.9388L28.7198 50.0315C28.5906 49.9024 28.5129 49.7307 28.5013 49.5484C28.4897 49.3661 28.545 49.1859 28.6568 49.0415L28.7198 48.9702ZM18.2198 48.9702C18.3547 48.8357 18.5358 48.7576 18.7263 48.7518C18.9168 48.746 19.1023 48.8129 19.2452 48.9389C19.3882 49.0649 19.4777 49.2406 19.4958 49.4303C19.5139 49.62 19.4591 49.8095 19.3425 49.9602L19.2803 50.0315L19.0605 50.2512H20.25C20.4337 50.2513 20.611 50.3187 20.7483 50.4408C20.8856 50.5628 20.9733 50.7311 20.9948 50.9135L21 51.0005C21 51.1843 20.9324 51.3617 20.8102 51.499C20.688 51.6363 20.5196 51.7239 20.337 51.7453L20.25 51.7505H19.0613L19.2803 51.9695C19.4094 52.0986 19.487 52.2705 19.4984 52.4527C19.5099 52.635 19.4545 52.8152 19.3425 52.9595L19.2803 53.0308C19.1511 53.1599 18.9793 53.2375 18.797 53.2489C18.6148 53.2604 18.4346 53.2049 18.2903 53.093L18.2198 53.0308L16.7198 51.5307L16.647 51.4467L16.593 51.3635L16.5533 51.2787L16.527 51.2L16.5082 51.1115L16.5023 51.0642L16.5 50.9855L16.503 50.933L16.515 50.8497L16.5375 50.7657L16.5698 50.6832L16.6095 50.6097L16.6598 50.5377C16.6784 50.5141 16.6984 50.4915 16.7198 50.4702L18.2198 48.9702ZM24 48.938C24.5471 48.938 25.0717 49.1553 25.4585 49.5421C25.8453 49.9289 26.0626 50.4535 26.0626 51.0005C26.0626 51.5475 25.8453 52.0721 25.4585 52.4589C25.0717 52.8457 24.5471 53.063 24 53.063C23.453 53.063 22.9284 52.8457 22.5416 52.4589C22.1548 52.0721 21.9375 51.5475 21.9375 51.0005C21.9375 50.4535 22.1548 49.9289 22.5416 49.5421C22.9284 49.1553 23.453 48.938 24 48.938ZM23.8883 43.5087L23.9438 43.5027L24.0413 43.502L24.1313 43.5125L24.234 43.538L24.3173 43.571L24.3908 43.61L24.4688 43.6655L24.5303 43.7202L26.0303 45.2202C26.1662 45.3549 26.2456 45.5364 26.2521 45.7276C26.2586 45.9189 26.1917 46.1053 26.0652 46.2489C25.9387 46.3925 25.7621 46.4822 25.5716 46.4999C25.3811 46.5175 25.191 46.4616 25.0403 46.3437L24.9698 46.2815L24.75 46.0617V47.2505C24.7502 47.4344 24.6827 47.612 24.5605 47.7495C24.4382 47.8869 24.2697 47.9746 24.087 47.996L24 48.0005C23.8163 48.0005 23.639 47.933 23.5018 47.8109C23.3645 47.6889 23.2768 47.5207 23.2553 47.3382L23.25 47.2505V46.061L23.0303 46.2815C22.9011 46.4106 22.7293 46.4882 22.547 46.4996C22.3648 46.5111 22.1846 46.4557 22.0403 46.3437L21.9698 46.2815C21.8406 46.1523 21.7631 45.9805 21.7516 45.7982C21.7402 45.616 21.7956 45.4358 21.9075 45.2915L21.9698 45.2202L23.4698 43.7202L23.5538 43.6482L23.6363 43.5942L23.7218 43.5545L23.8005 43.5275L23.8883 43.5087Z"
              fill="white"
            />
            <path
              d="M42.3034 56H38.6066V45.0908H42.3779C43.4611 45.0908 44.3915 45.3092 45.1692 45.746C45.9504 46.1793 46.5506 46.8025 46.9696 47.6157C47.3886 48.4289 47.5982 49.402 47.5982 50.5348C47.5982 51.6711 47.3869 52.6477 46.9643 53.4645C46.5452 54.2812 45.9398 54.908 45.1479 55.3448C44.3595 55.7816 43.4113 56 42.3034 56ZM40.5828 54.2901H42.2075C42.9674 54.2901 43.6013 54.1516 44.1091 53.8746C44.617 53.5941 44.9987 53.1768 45.2544 52.6228C45.5101 52.0653 45.6379 51.3693 45.6379 50.5348C45.6379 49.7002 45.5101 49.0078 45.2544 48.4573C44.9987 47.9034 44.6205 47.4897 44.1198 47.2162C43.6226 46.9392 43.0047 46.8007 42.2661 46.8007H40.5828V54.2901ZM51.7258 56V45.0908H55.8168C56.6548 45.0908 57.358 45.2364 57.9262 45.5276C58.4979 45.8188 58.9294 46.2272 59.2206 46.7528C59.5153 47.2748 59.6627 47.8838 59.6627 48.5799C59.6627 49.2794 59.5135 49.8867 59.2152 50.4016C58.9205 50.913 58.4855 51.3089 57.9102 51.5895C57.3349 51.8665 56.6282 52.0049 55.7901 52.0049H52.8764V50.3643H55.5238C56.0139 50.3643 56.4151 50.2968 56.7276 50.1619C57.0401 50.0234 57.271 49.8228 57.4201 49.56C57.5728 49.2936 57.6492 48.9669 57.6492 48.5799C57.6492 48.1928 57.5728 47.8625 57.4201 47.5891C57.2674 47.3121 57.0348 47.1026 56.7223 46.9605C56.4098 46.8149 56.0068 46.7421 55.5131 46.7421H53.7021V56H51.7258ZM57.3615 51.0568L60.0622 56H57.8569L55.2042 51.0568H57.3615ZM65.1327 56H63.0233L66.8639 45.0908H69.3035L73.1494 56H71.04L68.1263 47.3281H68.0411L65.1327 56ZM65.2019 51.7226H70.9548V53.31H65.2019V51.7226ZM83.6319 48.5745C83.5431 48.2869 83.4206 48.0294 83.2644 47.8022C83.1117 47.5713 82.927 47.3742 82.7104 47.2109C82.4973 47.0475 82.2523 46.925 81.9753 46.8433C81.6983 46.7581 81.3965 46.7155 81.0698 46.7155C80.4838 46.7155 79.9618 46.8629 79.5037 47.1576C79.0456 47.4524 78.6852 47.8856 78.4224 48.4573C78.1631 49.0255 78.0335 49.718 78.0335 50.5348C78.0335 51.3586 78.1631 52.0564 78.4224 52.6282C78.6816 53.1999 79.042 53.6349 79.5037 53.9332C79.9653 54.228 80.5016 54.3753 81.1124 54.3753C81.6664 54.3753 82.1458 54.2688 82.5506 54.0557C82.959 53.8427 83.2732 53.5408 83.4934 53.1502C83.7136 52.756 83.8237 52.2944 83.8237 51.7652L84.2711 51.8345H81.3095V50.2897H85.736V51.6001C85.736 52.5341 85.5371 53.342 85.1394 54.0238C84.7417 54.7056 84.1948 55.2312 83.4987 55.6005C82.8027 55.9663 82.0037 56.1491 81.1017 56.1491C80.0967 56.1491 79.2143 55.9237 78.4543 55.4727C77.6979 55.0181 77.1067 54.3736 76.6805 53.539C76.2579 52.701 76.0466 51.7067 76.0466 50.5561C76.0466 49.6754 76.1709 48.8888 76.4195 48.1963C76.6716 47.5039 77.0232 46.9161 77.4742 46.4332C77.9252 45.9467 78.4543 45.5774 79.0616 45.3252C79.6688 45.0695 80.3293 44.9417 81.0431 44.9417C81.6468 44.9417 82.2097 45.0305 82.7317 45.208C83.2537 45.382 83.7171 45.6306 84.122 45.9538C84.5304 46.2769 84.8659 46.6605 85.1287 47.1044C85.3915 47.5482 85.5637 48.0383 85.6454 48.5745H83.6319Z"
              fill="white"
            />
          </svg>
        </div>

        <ErrorBoundary>
        <div className="explorecards_hoverCards">
          {/* change the slider for this section, when the images move from the left on the top, it moves to the opp direction on the bottom */}
          <div className="exploreCard_wrap">
            {ExploreCards.map((card) => {
              return (
                <div
                  className="exploreCard"
                  key={card.id}
                  onClick={() => isHover(card.image, card.place, card.location, card.id)}
                >
                  <div className="exploreImage">
                    <img
                      src={require("../../assets/images/exploreImages/" +
                        card.image + ".png")}
                      alt="Location Pic"
                    />
                  </div>
                  <div className="exploreCard_content">
                    <h6 className="exploreCard_title">{card.place}</h6>
                    <p className="exploreCard_subtitle">{card.location}</p>
                    <div className="logosWrap">
                      <div className="whiteLogo"></div>
                      <div className="orangeLogo"></div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
          {
            hover && (
              <span className="hoverContent">
            <div className="exploreImage" key={popId}>
              <img
                src={require("../../assets/images/exploreImages/" + popImg + ".png")}
                alt="Location Pic"
              />
            </div>
            <div className="exploreCard_content">
              <h6 className="exploreCard_title">{popPlace}</h6>
              <p className="exploreCard_subtitle">{popLoc}</p>
              <div className="logosWrap">
                <div className="whiteLogo"></div>
                <div className="orangeLogo"></div>
              </div>
            </div>
          </span>
            )
          }
        </div>
        </ErrorBoundary>
      </div>
    </section>
  );
}
